"""
Report model for AI-generated company research reports

Stores comprehensive reports generated by multi-agent pipeline:
- SearchAgent: Company research
- AnalysisAgent: Strategic insights
- SynthesisAgent: Formatted report (markdown/HTML)
"""
from sqlalchemy import Column, Integer, String, Text, DateTime, ForeignKey, Float, JSON
from sqlalchemy.orm import relationship, Mapped, mapped_column
from sqlalchemy.sql import func
from datetime import datetime
from typing import Optional, Dict, Any
from .database import Base


class Report(Base):
    """
    AI-generated company research report
    
    Stores the complete output of the multi-agent research pipeline:
    1. Raw research data (CompanyResearch from SearchAgent)
    2. Strategic insights (StrategicInsights from AnalysisAgent)  
    3. Formatted report content (markdown and HTML from SynthesisAgent)
    
    Relationships:
    - Belongs to a Lead (many-to-one)
    """
    __tablename__ = "reports"
    
    # Primary Key
    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    
    # Foreign Key to Lead
    lead_id: Mapped[int] = mapped_column(Integer, ForeignKey("leads.id", ondelete="CASCADE"), nullable=False, index=True)
    
    # Report Metadata
    title: Mapped[str] = mapped_column(String(500), nullable=False)
    status: Mapped[str] = mapped_column(String(50), nullable=False, default="generating", index=True)
    # Status values: generating, completed, failed
    
    # Report Content
    content_markdown: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    content_html: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    
    # Structured Data (JSON columns for agent outputs)
    research_data: Mapped[Optional[Dict[str, Any]]] = mapped_column(JSON, nullable=True)
    # Stores CompanyResearch Pydantic model as JSON
    
    insights_data: Mapped[Optional[Dict[str, Any]]] = mapped_column(JSON, nullable=True)
    # Stores StrategicInsights Pydantic model as JSON
    
    # Quality Metrics
    confidence_score: Mapped[Optional[float]] = mapped_column(Float, nullable=True)
    # Average confidence from research and insights (0-100)
    
    generation_time_ms: Mapped[Optional[int]] = mapped_column(Integer, nullable=True)
    # Total time for report generation in milliseconds
    
    # Error Tracking
    error_message: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    # Error details if status = "failed"
    
    # Timestamps
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), 
        server_default=func.now(), 
        nullable=False,
        index=True
    )
    updated_at: Mapped[Optional[datetime]] = mapped_column(
        DateTime(timezone=True),
        onupdate=func.now()
    )
    
    # Relationships
    lead: Mapped["Lead"] = relationship("Lead", back_populates="reports")
    
    def __repr__(self):
        return f"<Report(id={self.id}, lead_id={self.lead_id}, status='{self.status}', title='{self.title[:50]}...')>"
