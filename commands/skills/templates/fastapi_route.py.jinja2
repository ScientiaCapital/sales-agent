from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List

from app.models.database import get_db
from app.schemas.{{ schema_name }} import {{ SchemaName }}Create, {{ SchemaName }}Response, {{ SchemaName }}Update
from app.services.{{ service_name }} import {{ ServiceName }}Service

router = APIRouter(prefix="/{{ name }}", tags=["{{ name }}"])

@router.post("/", response_model={{ SchemaName }}Response, status_code=status.HTTP_201_CREATED)
async def create_{{ name }}(
    {{ name }}_data: {{ SchemaName }}Create,
    db: Session = Depends(get_db)
) -> {{ SchemaName }}Response:
    """Create new {{ name }}."""
    try:
        service = {{ ServiceName }}Service(db)
        result = await service.create({{ name }}_data)
        return result
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Failed to create {{ name }}: {str(e)}"
        )

@router.get("/", response_model=List[{{ SchemaName }}Response])
async def list_{{ name }}s(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db)
) -> List[{{ SchemaName }}Response]:
    """List all {{ name }}s."""
    service = {{ ServiceName }}Service(db)
    return await service.list_all(skip=skip, limit=limit)

@router.get("/{id}", response_model={{ SchemaName }}Response)
async def get_{{ name }}(
    id: int,
    db: Session = Depends(get_db)
) -> {{ SchemaName }}Response:
    """Get {{ name }} by ID."""
    service = {{ ServiceName }}Service(db)
    result = await service.get_by_id(id)
    if not result:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="{{ name }} not found"
        )
    return result

@router.put("/{id}", response_model={{ SchemaName }}Response)
async def update_{{ name }}(
    id: int,
    {{ name }}_data: {{ SchemaName }}Update,
    db: Session = Depends(get_db)
) -> {{ SchemaName }}Response:
    """Update {{ name }}."""
    service = {{ ServiceName }}Service(db)
    result = await service.update(id, {{ name }}_data)
    if not result:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="{{ name }} not found"
        )
    return result

@router.delete("/{id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_{{ name }}(
    id: int,
    db: Session = Depends(get_db)
):
    """Delete {{ name }}."""
    service = {{ ServiceName }}Service(db)
    success = await service.delete(id)
    if not success:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="{{ name }} not found"
        )