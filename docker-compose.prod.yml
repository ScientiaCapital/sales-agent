version: '3.8'

services:
  # Production PostgreSQL with replication
  postgres-primary:
    image: postgres:16-alpine
    container_name: sales-agent-postgres-primary
    environment:
      POSTGRES_USER: "${POSTGRES_USER:?ERROR - POSTGRES_USER required}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:?ERROR - POSTGRES_PASSWORD required}"
      POSTGRES_DB: "${POSTGRES_DB:?ERROR - POSTGRES_DB required}"
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
      # Replication settings
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: "${POSTGRES_REPLICATION_PASSWORD:?ERROR - Required}"
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./backend/scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - sales-agent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production Redis with persistence
  redis:
    image: redis:7-alpine
    container_name: sales-agent-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:?ERROR - REDIS_PASSWORD required}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - sales-agent-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    restart: unless-stopped

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        PYTHON_VERSION: "3.13"
    container_name: sales-agent-backend
    environment:
      # Database
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-primary:5432/${POSTGRES_DB}"
      # Redis
      REDIS_URL: "redis://:${REDIS_PASSWORD}@redis:6379/0"
      # AI Services
      CEREBRAS_API_KEY: "${CEREBRAS_API_KEY:?ERROR - Required}"
      CEREBRAS_API_BASE: "${CEREBRAS_API_BASE:-https://api.cerebras.ai/v1}"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY}"
      OPENROUTER_API_KEY: "${OPENROUTER_API_KEY}"
      # Application
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      CORS_ORIGINS: "${CORS_ORIGINS:-https://sales-agent.example.com}"
      # Monitoring
      DATADOG_API_KEY: "${DATADOG_API_KEY}"
      DATADOG_SITE: "${DATADOG_SITE:-datadoghq.com}"
    ports:
      - "8001:8001"
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sales-agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Frontend (React + Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        NODE_VERSION: "20"
    container_name: sales-agent-frontend
    environment:
      VITE_API_URL: "${VITE_API_URL:-http://localhost:8001}"
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - sales-agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    restart: unless-stopped

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: sales-agent-nginx
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - sales-agent-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: sales-agent-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - sales-agent-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sales-agent-grafana
    environment:
      GF_SECURITY_ADMIN_USER: "${GRAFANA_ADMIN_USER:-admin}"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD:?ERROR - Required}"
      GF_SERVER_ROOT_URL: "${GRAFANA_ROOT_URL:-http://localhost:3001}"
      GF_INSTALL_PLUGINS: "redis-datasource"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - sales-agent-network
    restart: unless-stopped

  # Datadog agent for APM and monitoring
  datadog:
    image: gcr.io/datadoghq/agent:latest
    container_name: sales-agent-datadog
    environment:
      DD_API_KEY: "${DATADOG_API_KEY:?ERROR - Required}"
      DD_SITE: "${DATADOG_SITE:-datadoghq.com}"
      DD_APM_ENABLED: "true"
      DD_APM_NON_LOCAL_TRAFFIC: "true"
      DD_LOGS_ENABLED: "true"
      DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: "true"
      DD_PROCESS_AGENT_ENABLED: "true"
      DD_DOCKER_LABELS_AS_TAGS: '{"*":"true"}'
      DD_TAGS: "env:production service:sales-agent"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - sales-agent-network
    restart: unless-stopped

  # pgAdmin for database management (remove in production or restrict access)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: sales-agent-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_DEFAULT_EMAIL:?ERROR - Required}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_DEFAULT_PASSWORD:?ERROR - Required}"
      PGADMIN_LISTEN_PORT: 5050
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:5050"
    depends_on:
      - postgres-primary
    networks:
      - sales-agent-network
    restart: unless-stopped
    profiles:
      - admin  # Only start with --profile admin

volumes:
  postgres_primary_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  sales-agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Production deployment notes:
# 1. Set all required environment variables in .env.prod
# 2. Generate SSL certificates and place in nginx/ssl/
# 3. Configure Datadog API key for monitoring
# 4. Set strong passwords for all services
# 5. Deploy with: docker-compose -f docker-compose.prod.yml up -d
# 6. Monitor with: docker-compose -f docker-compose.prod.yml logs -f
# 7. Scale backend: docker-compose -f docker-compose.prod.yml up -d --scale backend=5
