name: Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags (e.g., v1.0.0)
  workflow_dispatch:  # Allow manual deployment

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from tag
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::8}
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Deploying version: ${VERSION}"

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/sales-agent-backend:${{ steps.version.outputs.VERSION }}
            ${{ secrets.DOCKER_REGISTRY }}/sales-agent-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/sales-agent-frontend:${{ steps.version.outputs.VERSION }}
            ${{ secrets.DOCKER_REGISTRY }}/sales-agent-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/sales-agent

            # Pull latest images
            docker-compose -f docker-compose.production.yml pull

            # Run database migrations
            docker-compose -f docker-compose.production.yml run --rm backend alembic upgrade head

            # Deploy with zero-downtime restart
            docker-compose -f docker-compose.production.yml up -d --no-deps --build backend frontend

            # Health check
            sleep 10
            curl -f http://localhost:8001/api/health || exit 1

            echo "‚úÖ Deployment successful!"

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Successfully deployed version ${{ steps.version.outputs.VERSION }} to production"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed for version ${{ steps.version.outputs.VERSION }}"
