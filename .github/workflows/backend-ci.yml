name: Backend CI

on:
  push:
    branches: [ main, develop, claude/** ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linters
        run: |
          cd backend
          pip install black flake8 mypy
          black --check app/ tests/ || true
          flake8 app/ tests/ --max-line-length=120 --exclude=__pycache__,migrations || true
          mypy app/ --ignore-missing-imports || true

      - name: Run tests
        env:
          DATABASE_URL: postgresql+psycopg://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          TESTING: true
          ANTHROPIC_API_KEY: test-key
          DEEPSEEK_API_KEY: test-key
        run: |
          cd backend
          pytest tests/ -v --tb=short --cov=app --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          pip install bandit safety

      - name: Run Bandit (security linter)
        run: |
          cd backend
          bandit -r app/ -f json -o bandit-report.json || true
          cat bandit-report.json

      - name: Check dependencies for vulnerabilities
        run: |
          cd backend
          safety check --json || true

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: false
          tags: sales-agent-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker build -f Dockerfile.prod -t sales-agent-backend:test .
          docker run --rm sales-agent-backend:test python -c "import app; print('âœ… App imports successfully')"
