# Production Docker Compose Configuration
# Sales Agent - Full Stack Deployment

version: '3.8'

services:
  # ========== PostgreSQL Database ==========
  postgres:
    image: postgres:16-alpine
    container_name: sales-agent-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sales_agent_db}
      POSTGRES_USER: ${POSTGRES_USER:-sales_agent}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - sales-agent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # ========== Redis Cache ==========
  redis:
    image: redis:7-alpine
    container_name: sales-agent-redis-prod
    restart: always
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - sales-agent-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # ========== Backend API ==========
  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: sales-agent-backend-prod
    restart: always
    environment:
      # Database
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0

      # AI Providers
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY}
      CEREBRAS_API_KEY: ${CEREBRAS_API_KEY}
      OLLAMA_API_KEY: ${OLLAMA_API_KEY:-ollama}

      # CRM
      CLOSE_API_KEY: ${CLOSE_API_KEY}
      APOLLO_API_KEY: ${APOLLO_API_KEY}
      HUNTER_API_KEY: ${HUNTER_API_KEY}

      # Voice
      CARTESIA_API_KEY: ${CARTESIA_API_KEY}

      # LangSmith
      LANGCHAIN_TRACING_V2: ${LANGCHAIN_TRACING_V2:-false}
      LANGCHAIN_API_KEY: ${LANGCHAIN_API_KEY}

      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      DATADOG_ENABLED: ${DATADOG_ENABLED:-false}

      # Application
      ENVIRONMENT: production
      DATABASE_ECHO: false
      DB_POOL_SIZE: 10
      DB_MAX_OVERFLOW: 20
    ports:
      - "8001:8001"
    networks:
      - sales-agent-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G
      replicas: 2  # For load balancing

  # ========== Celery Worker ==========
  celery:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: sales-agent-celery-prod
    restart: always
    command: celery -A app.celery_worker worker --loglevel=info --concurrency=4
    environment:
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY}
      CEREBRAS_API_KEY: ${CEREBRAS_API_KEY}
      CLOSE_API_KEY: ${CLOSE_API_KEY}
      APOLLO_API_KEY: ${APOLLO_API_KEY}
      ENVIRONMENT: production
    networks:
      - sales-agent-network
    depends_on:
      - redis
      - postgres
      - backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
      replicas: 2

  # ========== Celery Beat (Scheduler) ==========
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: sales-agent-celery-beat-prod
    restart: always
    command: celery -A app.celery_worker beat --loglevel=info
    environment:
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
      ENVIRONMENT: production
    networks:
      - sales-agent-network
    depends_on:
      - redis
      - postgres
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # ========== Frontend ==========
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: sales-agent-frontend-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    networks:
      - sales-agent-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
      replicas: 2

  # ========== Nginx Load Balancer ==========
  nginx:
    image: nginx:alpine
    container_name: sales-agent-nginx-prod
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "443:443"
      - "80:80"
    networks:
      - sales-agent-network
    depends_on:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 256M

networks:
  sales-agent-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
